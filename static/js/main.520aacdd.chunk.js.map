{"version":3,"sources":["assets/images/logo.gif","components/loading/Loading.js","App.js","reportWebVitals.js","index.js"],"names":["Loading","loaded","motion","div","id","className","variants","hidden","opacity","visible","transition","duration","exit","initial","animate","src","logo","width","alt","Main","React","lazy","App","useState","setLoaded","initialLoad","setInitialLoad","delay","setDelay","fallback","AnimatePresence","exitBeforeEnter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6HAAe,QAA0B,kC,gMC4C1BA,MAvCf,YAqBI,OArBuB,EAATC,OAuBV,cAACC,EAAA,EAAOC,IAAR,CACIC,GAAG,gBACHC,UAAU,6BACVC,SAxBuB,CAC3BC,OAAS,CACLC,QAAS,GAEbC,QAAS,CACLD,QAAS,EACTE,WAAY,CACRC,SAAU,KAGlBC,KAAO,CACHJ,QAAS,EACTE,WAAY,CACRC,SAAU,MAYdE,QAAQ,SACRC,QAAQ,UACRF,KAAK,OANT,SAQI,gCACI,qBAAKG,IAAKC,IAAMC,MAAM,SAASC,IAAI,SACnC,qBAAKb,UAAU,0BAAf,2B,gBChCVc,EAAOC,IAAMC,MAAK,kBAAM,sDAkCfC,MAhCf,WAEE,MAA4BC,oBAAS,GAArC,mBAAOtB,EAAP,KAAeuB,EAAf,KACA,EAAsCD,oBAAS,GAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KACA,EAA0BH,mBAAS,KAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAEA,OACE,qBAAKvB,UAAU,MAAf,SACE,eAAC,WAAD,CAAUwB,SAAU,qBAAKxB,UAAU,oDAAf,SACI,qBAAKA,UAAU,kBAAf,SAAiC,4BADzD,UAGGJ,EAAO,KACR,cAAC6B,EAAA,EAAD,CAAiBC,iBAAe,EAAhC,SACE,cAAC,EAAD,CAAS9B,OAAQA,MAInB,cAAC,IAAD,UACA,cAACkB,EAAD,CACElB,OAAQA,EACRuB,UAAWA,EACXC,YAAaA,EACbC,eAAgBA,EAChBC,MAAOA,EACPC,SAAUA,YCpBLI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.520aacdd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.bed5f136.gif\";","import React from 'react'\r\nimport './loading.scss'\r\nimport logo from '../../assets/images/logo.gif'\r\nimport { motion } from 'framer-motion'\r\n\r\nfunction Loading({loaded}) {\r\n\r\n    const loadingFadeOutVariants = {\r\n        hidden : {\r\n            opacity: 0 \r\n        },\r\n        visible: {\r\n            opacity: 1,\r\n            transition: {\r\n                duration :.5\r\n            }\r\n        },\r\n        exit : {\r\n            opacity: 0,\r\n            transition: {\r\n                duration :.5\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        \r\n        <motion.div\r\n            id=\"loadingScreen\" \r\n            className=\"vh100 vw100 center loading\"\r\n            variants={loadingFadeOutVariants}\r\n            initial=\"hidden\"\r\n            animate=\"visible\"\r\n            exit=\"exit\"\r\n            >\r\n            <div>\r\n                <img src={logo} width=\"100rem\" alt=\"logo\"></img>\r\n                <div className=\"loadingText text-center\">Loading</div>\r\n            </div>\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default Loading\r\n","import './App.scss';\nimport React, { useState, Suspense} from 'react'\nimport Loading from './components/loading/Loading';\nimport { BrowserRouter as Router,  } from 'react-router-dom';\nimport { AnimatePresence} from 'framer-motion'\n\nconst Main = React.lazy(() => import('./components/Main'));\n\nfunction App() {\n\n  const [loaded, setLoaded] = useState(false)\n  const [initialLoad, setInitialLoad] = useState(true)\n  const [delay, setDelay] = useState(1.5);\n\n  return (\n    <div className=\"App\">\n      <Suspense fallback={<div className=\"loadingio-spinner-rolling-vulbiq9juz center-fixed\">\n                              <div className=\"ldio-tud414hs6f\"><div></div></div>\n                          </div>} >\n        {loaded?null:\n        <AnimatePresence exitBeforeEnter> \n          <Loading loaded={loaded} />\n        </AnimatePresence>\n          \n          }\n        <Router >\n        <Main \n          loaded={loaded} \n          setLoaded={setLoaded} \n          initialLoad={initialLoad} \n          setInitialLoad={setInitialLoad} \n          delay={delay}\n          setDelay={setDelay}\n          />\n        </Router>\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}